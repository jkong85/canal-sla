//bandwidth control interface for EyeQ
//author: Yan Sun

package main

import (
	//"os"
	"encoding/json"
	//"io/ioutil"
	"fmt"
	"github.com/coreos/etcd/client"
	"github.com/docker/libkv"
	"github.com/docker/libkv/store"
	"github.com/docker/libkv/store/etcd"
	"golang.org/x/net/context"
	"log"
	"net"
	"time"
)

type ContainerBW struct {
	NodeIP          string
	PodID           string
	VlanID          string
	VxlanID         string
	PodIP           string
	Action          string
	InBandWidthMin  string // unit is Mbps
	InBandWidthMax  string // unit is Mbps
	OutBandWidthMin string // unit is Mbps
	OutBandWidthMax string // unit is Mbps
	PodPriority     string // 0-7, 0 is the highest priority, 7 is the lowest priority.
}

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/*
func SaveAsJson(bw []ContainerBW, path string) {
	b, err := json.Marshal(bw)
	check(err)
	ioutil.WriteFile(path, b, 0644)
}
*/
func main() {

	l, err := net.Interfaces()
	if err != nil {
		println(err)

	}
	for _, f := range l {
		fmt.Println(f.Index, f.Name)
	}

	bw := []ContainerBW{
		{"192.0.0.1", "1", "100", "1", "all", "", "100", "100", "100", "100", "0"},
		{"192.0.0.1", "1", "100", "1", "default", "", "10", "100", "10", "100", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.2", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.3", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.4", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.5", "delete", "20", "100", "20", "100", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.6", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.7", "delete", "20", "100", "20", "100", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.8", "delete", "20", "100", "20", "100", "7"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.9", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.10", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.11", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.12", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.13", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.14", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.15", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.16", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.17", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.18", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.19", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.20", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.21", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.22", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.23", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.24", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.25", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.26", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.27", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.28", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.29", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.30", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.31", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.32", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.33", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.34", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.35", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.36", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.37", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.38", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.39", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.40", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.41", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.42", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.43", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.44", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.45", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.46", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.47", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.48", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.49", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.50", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.51", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.52", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.53", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.54", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.55", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.56", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.57", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.58", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.59", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.60", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.61", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.62", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.63", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.64", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.65", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.66", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.67", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.68", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.69", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.70", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.71", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.72", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.73", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.74", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.75", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.76", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.77", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.78", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.79", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.80", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.81", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.82", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.83", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.84", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.85", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.86", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.87", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.88", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.89", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.90", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.91", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.92", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.93", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.94", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.95", "delete", "1000", "1000", "1000", "1000", "0"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.96", "delete", "10", "100", "10", "100", "5"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.97", "delete", "500", "500", "700", "700", "0"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.98", "delete", "200", "200", "200", "200", "5"},
		{"192.0.0.2", "2", "102", "2", "10.1.2.99", "delete", "200", "200", "200", "200", "7"},
		{"192.0.0.1", "1", "100", "1", "10.1.2.100", "delete", "1000", "1000", "1000", "1000", "0"},
	}

	// We can register as many backends that are supported by libkv
	etcd.Register()

	server := "127.0.0.1:4001"

	// Initialize a new store with consul
	kv, err := libkv.NewStore(
		store.ETCD,
		[]string{server},
		&store.Config{
			ConnectionTimeout: 10 * time.Second,
		},
	)
	if err != nil {
		log.Fatal("Cannot create store", kv)
	}

	cfg := client.Config{
		Endpoints: []string{"http://127.0.0.1:4001"},
		Transport: client.DefaultTransport,
		//set timeout per request to fail fast when the target endpoint is unavailable
		HeaderTimeoutPerRequest: time.Second,
	}

	c, err := client.New(cfg)
	if err != nil {
		log.Fatal(err)
	}

	kapi := client.NewKeysAPI(c)

	qos_encode, err := json.Marshal(bw)
	if err != nil {
		log.Fatal(err)
	}

	intf, err := net.InterfaceByName("ens3")

	if err != nil {
		log.Fatal("Cannot find interface by name eth0")
	}

	mac := intf.HardwareAddr

	key := "/" + string(mac)
	key = "kj"

	resp, err := kapi.Set(context.Background(), key, string(qos_encode), nil)
	if err != nil {
		log.Fatal(err)
	} else {
		//log.Printf("Set is done. Metadata is %q\n", resp)
		fmt.Println("Set is done. Metadata is %q\n", resp)
	}

	/*
		path := "./qos.json"
		f, err := os.Create(path)
		check(err)

		defer f.Close()
		SaveAsJson(bw, path)
		f.Sync()
	*/
}
